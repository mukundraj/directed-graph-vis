{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["window","CANNON","gravityVector","Vector3","sphere","onButtonClicked","physicsImpostor","applyImpulse","Up","scale","getAbsolutePosition","App","sphereRef","useCallback","node","hostInstance","className","antialias","adaptToDeviceRatio","canvasId","enablePhysics","CannonJSPlugin","name","target","alpha","Math","PI","beta","radius","minZ","wheelPrecision","lowerRadiusLimit","upperRadiusLimit","upperBetaLimit","direction","intensity","setDirectionToTarget","Zero","position","shadowMinZ","shadowMaxZ","mapSize","useBlurExponentialShadowMap","blurKernel","darkness","shadowCasters","forceBackFacesOnly","depthScale","ref","diameter","segments","type","PhysicsImpostor","SphereImpostor","_options","mass","restitution","specularPower","diffuseColor","Color3","Black","emissiveColor","reflectionFresnelParameters","FresnelParameters","Parse","isEnabled","leftColor","rightColor","bias","power","size","sideOrientation","Mesh","BACKSIDE","height","width","createForParentMesh","hasAlpha","generateMipMaps","samplingMode","Texture","TRILINEAR_SAMPLINGMODE","thickness","cornerRadius","background","onPointerDownObservable","text","fontFamily","fontStyle","fontSize","color","subdivisions","receiveShadows","BoxImpostor","webVROptions","createDeviceOrientationCamera","enableInteractions","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAOAA,OAAOC,OAASA,EAEhB,IAAMC,EAAgB,IAAIC,IAAQ,GAAI,KAAM,GACxCC,EAAyB,KAEvBC,EAAkB,WACP,OAAXD,GACFA,EAAOE,gBAAiBC,aAAaJ,IAAQK,KAAKC,MAAM,IAAKL,EAAOM,wBAoEzDC,EAhEO,WACpB,IAAMC,EAAYC,uBAAY,SAAAC,GAC5BV,EAASU,EAAKC,eACb,IAEH,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6DACA,kBAAC,IAAD,CAAQC,WAAW,EAAMC,oBAAoB,EAAMC,SAAS,iBAC1D,kBAAC,IAAD,CAAOC,cAAe,CAAClB,EAAe,IAAImB,MACxC,qCAAiBC,KAAK,MAAMC,OAAS,IAAIpB,IAAQ,EAAG,EAAG,GACjDqB,OAAQC,KAAKC,GAAK,EAAGC,KAAO,GAAOF,KAAKC,GAAK,EAC7CE,OAAQ,EAAGC,KAAM,KAAOC,eAAgB,GACxCC,iBAAkB,EAAGC,iBAAkB,GAAIC,eAAgBR,KAAKC,GAAK,IAC3E,sCAAkBJ,KAAK,OAAOY,UAAW,IAAI/B,IAAQ,GAAI,EAAG,GAAIgC,UAAW,KAC3E,sCAAkBb,KAAK,eAAec,qBAAsB,CAACjC,IAAQkC,QAASH,UAAW/B,IAAQkC,OAAQC,SAAY,IAAInC,KAAS,GAAI,IAAK,IACzIgC,UAAW,GAAKI,WAAY,EAAGC,WAAY,MAC3C,qCAAiBC,QAAS,KAAMC,6BAA6B,EAAMC,WAAY,GAAIC,SAAU,GAC3FC,cAAe,CAAC,UAAW,UAAWC,oBAAoB,EAAMC,WAAY,OAEhF,4BAAQC,IAAKpC,EAAWU,KAAK,UAAU2B,SAAU,EAAGC,SAAU,GAAIZ,SAAU,IAAInC,IAAQ,EAAG,IAAK,IAC9F,qCAAiBgD,KAAMC,IAAgBC,eAAgBC,SAAU,CAAEC,KAAM,EAAGC,YAAa,MACzF,sCAAkBlC,KAAK,YAAYmC,cAAe,GAChDC,aAAcC,IAAOC,QACrBC,cAAe,IAAIF,IAAO,GAAK,GAAK,IACpCG,4BAA6BC,IAAkBC,MAAM,CACjDC,WAAW,EACXC,UAAW,CAAC,EAAG,EAAG,GAClBC,WAAY,CAAC,EAAG,EAAG,GACnBC,KAAM,GACNC,MAAO,MAGb,2BAAO/C,KAAK,SAASgD,KAAM,EAAGhC,SAAU,IAAInC,IAAQ,EAAG,IAAK,GAAIoE,gBAAiBC,IAAKC,UACpF,4CACInD,KAAK,gBACLoD,OAAQ,KAAMC,MAAO,KACrBC,qBAAqB,EACrBC,UAAU,EACVC,iBAAiB,EACjBC,aAAcC,IAAQC,wBAEtB,+BAAW3D,KAAK,SAASoD,OAAQ,GAAKC,MAAO,EAAGO,UAAW,GAAIC,aAAc,IACzE,mCACI,oCAAgB7D,KAAK,aAAa8D,WAAW,QAAQC,wBAAyBhF,GAC9E,+BAAWiF,KAAM,kBAAmBC,WAAW,cAAcC,UAAU,OAAOC,SAAU,IAAKC,MAAM,gBAQnH,4BAAQpE,KAAK,UAAUqD,MAAO,GAAID,OAAQ,GAAIiB,aAAc,EAAGC,gBAAgB,GAC7E,qCAAiBzC,KAAMC,IAAgByC,YAAavC,SAAU,CAAEC,KAAM,EAAGC,YAAa,OAExF,wCAAoBsC,aAAc,CAAEC,+BAA+B,GAASC,oBAAoB,SC/DxFC,QACW,cAA7BjG,OAAOkG,SAASC,UAEe,UAA7BnG,OAAOkG,SAASC,UAEhBnG,OAAOkG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b12889b6.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\r\nimport \"@babylonjs/core/Physics/physicsEngineComponent\"  // side-effect adds scene.enablePhysics function\r\nimport { Vector3, PhysicsImpostor, Mesh, Nullable, Color3, FresnelParameters, Texture } from '@babylonjs/core';\r\nimport { CannonJSPlugin } from '@babylonjs/core/Physics/Plugins'\r\nimport { Scene, Engine } from 'react-babylonjs';\r\nimport './App.css';\r\nimport * as CANNON from 'cannon';\r\nwindow.CANNON = CANNON;\r\n\r\nconst gravityVector = new Vector3(0, -9.81, 0);\r\nlet sphere: Nullable<Mesh> = null;\r\n\r\nconst onButtonClicked = () => {\r\n  if (sphere !== null) {\r\n    sphere.physicsImpostor!.applyImpulse(Vector3.Up().scale(10), sphere.getAbsolutePosition())\r\n  }\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const sphereRef = useCallback(node => {\r\n    sphere = node.hostInstance;\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>@babylonjs + `react-babylonjs`</p>\r\n        <Engine antialias={true} adaptToDeviceRatio={true} canvasId=\"sample-canvas\">\r\n          <Scene enablePhysics={[gravityVector, new CannonJSPlugin()]}>\r\n            <arcRotateCamera name=\"arc\" target={ new Vector3(0, 1, 0) }\r\n                  alpha={-Math.PI / 2} beta={(0.5 + (Math.PI / 4))}\r\n                  radius={4} minZ={0.001} wheelPrecision={50} \r\n                  lowerRadiusLimit={8} upperRadiusLimit={20} upperBetaLimit={Math.PI / 2} />\r\n            <hemisphericLight name='hemi' direction={new Vector3(0, -1, 0)} intensity={0.8} />\r\n            <directionalLight name=\"shadow-light\" setDirectionToTarget={[Vector3.Zero()]} direction={Vector3.Zero()} position = {new Vector3(-40, 30, -40)}\r\n              intensity={0.4} shadowMinZ={1} shadowMaxZ={2500}>\r\n              <shadowGenerator mapSize={1024} useBlurExponentialShadowMap={true} blurKernel={32} darkness={0.8}\r\n                shadowCasters={[\"sphere1\", \"dialog\"]} forceBackFacesOnly={true} depthScale={100} />\r\n            </directionalLight>\r\n            <sphere ref={sphereRef} name=\"sphere1\" diameter={2} segments={16} position={new Vector3(0, 2.5, 0)}>\r\n              <physicsImpostor type={PhysicsImpostor.SphereImpostor} _options={{ mass: 1, restitution: 0.9 }} />\r\n              <standardMaterial name='material1' specularPower={16}\r\n                diffuseColor={Color3.Black()}\r\n                emissiveColor={new Color3(0.5, 0.5, 0.5)}\r\n                reflectionFresnelParameters={FresnelParameters.Parse({\r\n                    isEnabled: true,\r\n                    leftColor: [1, 1, 1],\r\n                    rightColor: [0, 0, 0],\r\n                    bias: 0.1,\r\n                    power: 1\r\n                })}\r\n              />\r\n              <plane name=\"dialog\" size={2} position={new Vector3(0, 1.5, 0)} sideOrientation={Mesh.BACKSIDE}>\r\n                <advancedDynamicTexture\r\n                    name=\"dialogTexture\"\r\n                    height={1024} width={1024}\r\n                    createForParentMesh={true}\r\n                    hasAlpha={true}\r\n                    generateMipMaps={true}\r\n                    samplingMode={Texture.TRILINEAR_SAMPLINGMODE}\r\n                  >\r\n                    <rectangle name=\"rect-1\" height={0.5} width={1} thickness={12} cornerRadius={12}>\r\n                        <rectangle>\r\n                            <babylon-button name=\"close-icon\" background=\"green\" onPointerDownObservable={onButtonClicked} >\r\n                            <textBlock text={'\\uf00d click me'} fontFamily=\"FontAwesome\" fontStyle=\"bold\" fontSize={200} color=\"white\" />\r\n                            </babylon-button>\r\n                        </rectangle>\r\n                    </rectangle>\r\n                  </advancedDynamicTexture>\r\n              </plane>\r\n            </sphere>\r\n            \r\n            <ground name=\"ground1\" width={10} height={10} subdivisions={2} receiveShadows={true}>\r\n              <physicsImpostor type={PhysicsImpostor.BoxImpostor} _options={{ mass: 0, restitution: 0.9 }} />\r\n            </ground>\r\n            <vrExperienceHelper webVROptions={{ createDeviceOrientationCamera: false }} enableInteractions={true} />\r\n          </Scene>\r\n        </Engine>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}